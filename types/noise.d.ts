import type { Noise, PackedNoise } from './schema';
import type { Upto } from './types';
export declare const MIN_EB = 2;
export declare const MAX_EB = 32;
export declare const NOISE_BYTES = 16;
export declare const NOISE_FP_SIZE = 6;
export declare const NOISE_BITS: number;
export declare const NOISE_DIST_MAX: number;
export type EB = Upto<typeof MAX_EB>;
export declare const EB: (eb: number) => EB;
export declare const ebFor: (N: number) => EB;
export declare const noiseCode: (code: Uint8Array | number[]) => Noise;
export declare const dupNoise: (noise: Noise) => Noise;
export declare const noiseLen: (noise: Noise) => number;
export declare const noiseFor: (data: ArrayBuffer) => Promise<Noise>;
export declare const genNoise: () => Noise;
export declare const packedUUID: () => PackedNoise;
export declare const zeroNoise: () => Noise;
export declare const noiseBit: (noise: Noise, index: number) => 0 | 1;
export declare const noiseSet: (noise: Noise, index: number, bit: number) => Uint8Array & import("valibot").Brand<"Noise">;
export declare const noiseNeg: (noise: Noise) => Noise;
export declare const noiseSlot: (noise: Noise, bits: number) => Noise;
export declare const slotLSB: (slot: Noise) => number;
export declare const slotToHex: (slot: Noise, bits?: number) => string;
export declare const slotForHex: (hex: string) => Noise;
export declare const noiseToHex: (noise: Noise) => string;
export declare const slotToBin: (slot: Noise, bits?: number) => string;
export declare const noiseSame: (n1: Noise, n2: Noise, bits: number) => boolean;
export declare const noiseReverse: (noise: Noise) => Noise;
export declare const noiseSameAt: (n1: Noise, n2: Noise, index: number) => boolean;
export declare const noiseRank: (n1: Noise | PackedNoise, n2: Noise) => number;
export declare const noiseValue: (noise: Noise) => bigint;
export declare const NoiseValueMax: bigint;
export declare const noiseForValue: (value: bigint) => Noise;
export declare const noiseEdit: (n1: Noise, n2: Noise, bits?: number) => number;
export declare const noiseDist: (n1: Noise, n2: Noise, bits?: EB) => number;
export declare const noiseCount: (noise: Noise) => number;
export declare const packNoise: (noise: Noise) => PackedNoise;
export declare const unpackNoise: (packed: PackedNoise) => Noise;
